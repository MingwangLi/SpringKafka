server.port=8080

spring.kafka.bootstrap-servers=localhost:9092

# ID在发出请求时传递给服务器，用于服务器端日志记录
# 不要配置client-id 让系统自动生成
# spring.kafka.client-id=default


# 重试次数
spring.kafka.producer.retries=5

# 批处理条数
spring.kafka.producer.batch-size=16384

# 批处理缓冲区32M
spring.kafka.producer.buffer-memory=33554432

# ack模式
spring.kafka.producer.acks=-1

# 生产者消息key序列化方式
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer

# 生产者消息value序列化方式
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# 事务前缀
spring.kafka.producer.transaction-id-prefix=kafka_tx_



# 消费组
spring.kafka.consumer.group-id=default_group

# 如果为true，则消费者的偏移量将在后台定期提交，默认值为true
spring.kafka.consumer.enable-auto-commit=true

# 消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000
spring.kafka.consumer.auto-commit-interval=100

# 当Kafka中没有初始偏移量或者服务器上不再存在当前偏移量时该怎么办，默认值为latest，表示自动将偏移重置为最新的偏移量
# 可选的值为latest, earliest, none
spring.kafka.consumer.auto-offset-reset=earliest

# 如果没有足够的数据立即满足“fetch.min.bytes”给出的要求，服务器在回答获取请求之前将阻塞的最长时间（以毫秒为单位）
# 默认值为500
spring.kafka.consumer.fetch-max-wait=500

# 服务器应以字节为单位返回获取请求的最小数据量，默认值为1，对应的kafka的参数为fetch.min.bytes。
spring.kafka.consumer.fetch-min-size=1

# 一次调用poll()操作时返回的最大记录数，默认值为500
spring.kafka.consumer.max-poll-records=500

# 心跳检测频率（以毫秒为单位），默认值为3000
spring.kafka.consumer.heartbeat-interval=3000

# 消费者消息key的反序列化方式
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# 消费者消息value的反序列化方式
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer




# topic不存在报错
spring.kafka.listener.missing-topics-fatal=false

# 轮询消费者时使用的超时（以毫秒为单位）
spring.kafka.listener.poll-timeout=5000

# 非自动提交的提交模式
spring.kafka.listener.ack-mode=

# 在侦听器容器中运行的线程数 建议在@KafkaListener配置
# spring.kafka.listener.concurrency=4

